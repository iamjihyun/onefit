<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
<!-- DataSource 등록
		- DataSource는 서버 구동 시 동시에 연결이 되어야 하며
		연결 정보 설정 시 root-context 가장 위쪽에 작성한다.
		그래야만 아래 작성되는 설정에서 DataSource를 참조해서 사용할 수 있다. -->	
	
	<!-- destroy-method = "close" 주어진 세션을 자동으로 close하라는 의미 -->	
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
		<property name="url" value="jdbc:oracle:thin:@localhost:1521:xe"/>
		<property name="username" value="onefit"/>
		<property name="password" value="1234"/>
		<property name="defaultAutoCommit" value="false"/>
		<!--db세팅의 의미
			DataSource ds = new DataSource(driverClassName, url, username, password, defaultAutoCommit);
		-->
	</bean>		
	<bean id="transactionManager"
	 class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	 	<property name="dataSource" ref="dataSource"/>
	 </bean>
	
	 <!-- 트랜잭션 매니저 추가 후 namespace에서 tx 추가 -->
	 <!-- 트랜잭션 사용 방법 aop, 어노테이션 -->
	 <!-- 위에 만든 빈의 id로 만든 어드바이스임. -->
	 <tx:advice id="txAdvice" transaction-manager="transactionManager">
	 <tx:attributes>
	 <!-- 익셉션이 나면 무조건 롤백하겠다는 속성 적용. -->
	 	<tx:method name="select*" read-only="true" rollback-for="Exception"/>
	 	<tx:method name="insert*" rollback-for="Exception"/>
	 	<tx:method name="update*" rollback-for="Exception"/>
	 	<tx:method name="delete*" rollback-for="Exception"/>
	 </tx:attributes>
	 </tx:advice>


	<!--	마이바티스 sqlSession 등록하기 -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!--	우리가 미리 작성해둔 mybatis-config.xml 설정 불러 해당 객체에 선언할 것. -->
		<property name="configLocation" value="classpath:mybatis-config.xml"/>
		<property name="dataSource" ref="dataSource"/>
	</bean>
	<!--	최종적으로 우리가 사용할 빈 -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSession"/>
	</bean>
		
	<!-- 파일 업로드 관련 Bean 등록 -->
	<!-- MultipartResolver -->
	<bean id="multipartResolver"
	class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="100000000"/>
		<property name="maxInMemorySize" value="100000000"/>
	</bean>	 
	 
	
</beans>
